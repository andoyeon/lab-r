plot(mov_model)  # 모델이 적합한지
# 통계적으로 유의한지 여부 확인
summary(mov_model)   # other_actors_facebook_likes 제외 나머지 변수들 유의미
# Backward selection 자동화
mov_model2 <- step(out, direction = "backward", trace = T)
mov_model2    # 최종 선택된 회귀모형
summary(mov_model2)
sample_count <- round(nrow(movie)) * 0.75
# 회귀 트리
library(rpart)
sample_count <- round(nrow(movie)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(movie), sample_count)
train <- movie[sample_rows, ]
test <- movie[-sample_rows, ]
# 예측
mov_pred <- predict(mov_model2, test)
summary(mov_pred)
summary(mov_model2)
rm(list=ls())
load("data/project/movie.rda")
avg_num_critic_for_reviews <- mean(movie$num_critic_for_reviews, na.rm = T)
movie$num_critic_for_reviews <- ifelse(is.na(movie$num_critic_for_reviews),
avg_num_critic_for_reviews,movie$num_critic_for_reviews)
avg_duration <- mean(movie$duration, na.rm = T)
movie$duration <- ifelse(is.na(movie$duration), avg_duration, movie$duration)
avg_director_facebook_likes <- mean(movie$director_facebook_likes, na.rm = T)
movie$director_facebook_likes <- ifelse(is.na(movie$director_facebook_likes),
avg_director_facebook_likes, movie$director_facebook_likes)
avg_actor_3_facebook_likes <- mean(movie$actor_3_facebook_likes, na.rm = T)
movie$actor_3_facebook_likes <- ifelse(is.na(movie$actor_3_facebook_likes),
avg_actor_3_facebook_likes, movie$actor_3_facebook_likes)
avg_actor_1_facebook_likes <- mean(movie$actor_1_facebook_likes, na.rm = T)
movie$actor_1_facebook_likes <- ifelse(is.na(movie$actor_1_facebook_likes),
avg_actor_1_facebook_likes, movie$actor_1_facebook_likes)
avg_gross <- mean(movie$gross, na.rm = T)
movie$gross <- ifelse(is.na(movie$gross), avg_gross, movie$gross)
avg_facenumber_in_poster <- mean(movie$facenumber_in_poster, na.rm = T)
movie$facenumber_in_poster <- ifelse(is.na(movie$facenumber_in_poster),
avg_facenumber_in_poster, movie$facenumber_in_poster)
avg_num_user_for_reviews <- mean(movie$num_user_for_reviews, na.rm = T)
movie$num_user_for_reviews <- ifelse(is.na(movie$num_user_for_reviews),
avg_num_user_for_reviews, movie$num_user_for_reviews)
avg_budget <- mean(movie$budget, na.rm = T)
movie$budget <- ifelse(is.na(movie$budget), avg_budget, movie$budget)
avg_actor_2_facebook_likes <- mean(movie$actor_2_facebook_likes, na.rm = T)
movie$actor_2_facebook_likes <- ifelse(is.na(movie$actor_2_facebook_likes),
avg_actor_2_facebook_likes, movie$actor_2_facebook_likes)
avg_aspect_ratio <- mean(movie$aspect_ratio, na.rm = T)
movie$aspect_ratio <- ifelse(is.na(movie$aspect_ratio), avg_aspect_ratio, movie$aspect_ratio)
library(ggplot2)
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_light()
movie_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
movie_data$other_actors_facebook_likes <- movie_data$actor_2_facebook_likes + movie_data$actor_3_facebook_likes
movie_data <- subset(movie_data, select = -c(cast_total_facebook_likes, actor_2_facebook_likes, actor_3_facebook_likes))
cormat <- round(cor(movie_data), 2)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
ggtitle("Correlation Heatmap") +
geom_tile(color = "white")+
scale_fill_gradient2(low = "black", high = "#FFCC00", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
rm(list=ls())
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
avg_num_critic_for_reviews <- mean(movie$num_critic_for_reviews, na.rm = T)
movie$num_critic_for_reviews <- ifelse(is.na(movie$num_critic_for_reviews),
avg_num_critic_for_reviews,movie$num_critic_for_reviews)
avg_duration <- mean(movie$duration, na.rm = T)
movie$duration <- ifelse(is.na(movie$duration), avg_duration, movie$duration)
avg_director_facebook_likes <- mean(movie$director_facebook_likes, na.rm = T)
movie$director_facebook_likes <- ifelse(is.na(movie$director_facebook_likes),
avg_director_facebook_likes, movie$director_facebook_likes)
avg_actor_3_facebook_likes <- mean(movie$actor_3_facebook_likes, na.rm = T)
movie$actor_3_facebook_likes <- ifelse(is.na(movie$actor_3_facebook_likes),
avg_actor_3_facebook_likes, movie$actor_3_facebook_likes)
avg_actor_1_facebook_likes <- mean(movie$actor_1_facebook_likes, na.rm = T)
movie$actor_1_facebook_likes <- ifelse(is.na(movie$actor_1_facebook_likes),
avg_actor_1_facebook_likes, movie$actor_1_facebook_likes)
avg_gross <- mean(movie$gross, na.rm = T)
movie$gross <- ifelse(is.na(movie$gross), avg_gross, movie$gross)
avg_facenumber_in_poster <- mean(movie$facenumber_in_poster, na.rm = T)
movie$facenumber_in_poster <- ifelse(is.na(movie$facenumber_in_poster),
avg_facenumber_in_poster, movie$facenumber_in_poster)
avg_num_user_for_reviews <- mean(movie$num_user_for_reviews, na.rm = T)
movie$num_user_for_reviews <- ifelse(is.na(movie$num_user_for_reviews),
avg_num_user_for_reviews, movie$num_user_for_reviews)
avg_budget <- mean(movie$budget, na.rm = T)
movie$budget <- ifelse(is.na(movie$budget), avg_budget, movie$budget)
avg_actor_2_facebook_likes <- mean(movie$actor_2_facebook_likes, na.rm = T)
movie$actor_2_facebook_likes <- ifelse(is.na(movie$actor_2_facebook_likes),
avg_actor_2_facebook_likes, movie$actor_2_facebook_likes)
avg_aspect_ratio <- mean(movie$aspect_ratio, na.rm = T)
movie$aspect_ratio <- ifelse(is.na(movie$aspect_ratio), avg_aspect_ratio, movie$aspect_ratio)
library(ggplot2)
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_light()
# imdb_score과 관련있는 변수 확인 - 히트맵
num_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "aspect_ratio",
"movie_facebook_likes")]
# install.packages("Hmisc")
library(Hmisc)
c1 <- rcorr(as.matrix(num_data))
View(c1$r)
# install.packages("RColorBrewer")
# install.packages("gplots")
library(RColorBrewer)
library(gplots)
heatmap.2(as.matrix(c1$r), trace = "none", col = brewer.pal(9, "RdBu"),
cexCol = 0.8, cexRow = 0.8, margins = c(9,9), density.info = "none")
# 회귀 모델
mov_model <- lm(formula = imdb_score ~ ., data = movie)
plot(mov_model)  # 모델이 적합한지
# 통계적으로 유의한지 여부 확인
summary(mov_model)   # other_actors_facebook_likes 제외 나머지 변수들 유의미
movie_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
movie_data$other_actors_facebook_likes <- movie_data$actor_2_facebook_likes + movie_data$actor_3_facebook_likes
movie_data <- subset(movie_data, select = -c(cast_total_facebook_likes, actor_2_facebook_likes, actor_3_facebook_likes))
movie <- movie_data[c("facenumber_in_poster", "director_facebook_likes", "duration", "imdb_score",
"actor_1_facebook_likes", "other_actors_facebook_likes", "movie_facebook_likes",
"budget")]
library(car)
vif(lm(imdb_score ~ ., data = movie))
# 회귀 모델
mov_model <- lm(formula = imdb_score ~ ., data = movie)
plot(mov_model)  # 모델이 적합한지
out <- lm(imdb_score ~., movie)
# 모형 선택법(Model Selection) --> 유의하지 않은 변수 제거
# Backward selection
out <- lm(imdb_score ~., movie)
# 통계적으로 유의한지 여부 확인
summary(mov_model)   # other_actors_facebook_likes 제외 나머지 변수들 유의미
# 모형 선택법(Model Selection) --> 유의하지 않은 변수 제거
# Backward selection
out <- lm(imdb_score ~., movie)
# Backward selection 자동화
mov_model2 <- step(out, direction = "backward", trace = T)
mov_model2    # 최종 선택된 회귀모형
summary(mov_model2)
plot(mov_model2)
rm(list=ls())
load("data/project/movie.rda")
avg_num_critic_for_reviews <- mean(movie$num_critic_for_reviews, na.rm = T)
movie$num_critic_for_reviews <- ifelse(is.na(movie$num_critic_for_reviews),
avg_num_critic_for_reviews,movie$num_critic_for_reviews)
avg_duration <- mean(movie$duration, na.rm = T)
movie$duration <- ifelse(is.na(movie$duration), avg_duration, movie$duration)
avg_director_facebook_likes <- mean(movie$director_facebook_likes, na.rm = T)
movie$director_facebook_likes <- ifelse(is.na(movie$director_facebook_likes),
avg_director_facebook_likes, movie$director_facebook_likes)
avg_actor_3_facebook_likes <- mean(movie$actor_3_facebook_likes, na.rm = T)
movie$actor_3_facebook_likes <- ifelse(is.na(movie$actor_3_facebook_likes),
avg_actor_3_facebook_likes, movie$actor_3_facebook_likes)
avg_actor_1_facebook_likes <- mean(movie$actor_1_facebook_likes, na.rm = T)
movie$actor_1_facebook_likes <- ifelse(is.na(movie$actor_1_facebook_likes),
avg_actor_1_facebook_likes, movie$actor_1_facebook_likes)
avg_gross <- mean(movie$gross, na.rm = T)
movie$gross <- ifelse(is.na(movie$gross), avg_gross, movie$gross)
avg_facenumber_in_poster <- mean(movie$facenumber_in_poster, na.rm = T)
movie$facenumber_in_poster <- ifelse(is.na(movie$facenumber_in_poster),
avg_facenumber_in_poster, movie$facenumber_in_poster)
avg_num_user_for_reviews <- mean(movie$num_user_for_reviews, na.rm = T)
movie$num_user_for_reviews <- ifelse(is.na(movie$num_user_for_reviews),
avg_num_user_for_reviews, movie$num_user_for_reviews)
avg_budget <- mean(movie$budget, na.rm = T)
movie$budget <- ifelse(is.na(movie$budget), avg_budget, movie$budget)
avg_actor_2_facebook_likes <- mean(movie$actor_2_facebook_likes, na.rm = T)
movie$actor_2_facebook_likes <- ifelse(is.na(movie$actor_2_facebook_likes),
avg_actor_2_facebook_likes, movie$actor_2_facebook_likes)
avg_aspect_ratio <- mean(movie$aspect_ratio, na.rm = T)
movie$aspect_ratio <- ifelse(is.na(movie$aspect_ratio), avg_aspect_ratio, movie$aspect_ratio)
library(ggplot2)
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_light()
movie_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
# 변수 수정 및 삭제
movie_data$other_actors_facebook_likes <- movie_data$actor_2_facebook_likes + movie_data$actor_3_facebook_likes
movie_data <- subset(movie_data, select = -c(cast_total_facebook_likes, actor_2_facebook_likes, actor_3_facebook_likes))
cormat <- round(cor(movie_data), 2)
library(reshape2)
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
ggtitle("Correlation Heatmap") +
geom_tile(color = "white")+
scale_fill_gradient2(low = "black", high = "#FFCC00", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(hjust = 0.5))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
movie <- movie_data[c("facenumber_in_poster", "director_facebook_likes", "duration", "imdb_score",
"actor_1_facebook_likes", "other_actors_facebook_likes", "movie_facebook_likes",
"budget")]
# imdb_score 분포도
hist(movie$imdb_score, col = "#FFCC00", border = "white")
# 산점 행렬도
library(psych)
pairs.panels(movie)
# 다중공선성 확인
# 다중공선성: 독립변수들이 서로 높은 상관관계를 가지면 회귀계수의 정확한 추정이 어렵다.
library(car)
vif(lm(imdb_score ~ ., data = movie))
# 회귀 모델
mov_model <- lm(formula = imdb_score ~ ., data = movie)
# 통계적으로 유의한지 여부 확인
summary(mov_model)
# other_actors_facebook_likes 제외 나머지 변수들 유의미
# 모형 선택법(Model Selection) --> 유의하지 않은 변수 제거
# Backward selection
out <- lm(imdb_score ~., movie)
# other_actors_facebook_likes 제외 나머지 변수들 유의미
# 모형 선택법(Model Selection) --> 유의하지 않은 변수 제거
# Backward selection
mov_model2 <- step(mov_model, direction = "backward", trace = T)
summary(mov_model2)
plot(mov_model2)  # 모델이 적합한지
# 회귀 트리
library(rpart)
sample_count <- round(nrow(movie)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(movie), sample_count)
train <- movie[sample_rows, ]
test <- movie[-sample_rows, ]
# rpart를 이용해 학습시키기
movie_rpart <- rpart(formula = imdb_score ~ ., data = train)
movie_rpart
# 회귀트리 시각화
library(rpart.plot)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.8, fallen.leaves = T, type = 5)
# 모델 평가
movie_predict <- predict(movie_rpart, test)
summary(movie_predict)
summary(test$imdb_score)
# 모델 성능 평가
# 1) 상관 계수
cor(movie_predict, test$imdb_score)
# 2) MAE: 평균 절대 오차
MAE <- function(actual, predict) {
return(mean(abs(actual - predict)))
}
MAE(actual = test$imdb_score, predict = movie_predict)
```
###    3) 모델 트리
```{r}
# 모델 성능 향상
# 모델 트리
library(Cubist)
movie_cubist <- cubist(x = train[-6], y = train$imdb_score)
movie_cubist
# 모델 트리 성능 테스트
movie_predict2 <- predict(movie_cubist, test)
head(movie_predict2)
summary(movie_predict2)
summary(test$imdb_score)
# 모델 성능 평가
# 1) 상관 계수
cor(movie_predict2, test$imdb_score)  # 0.469
# 2) MAE
MAE(actual = test$imdb_score, predict = movie_predict2) # 0.736
```
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
USA_movie <- read.csv("data/project/USA_movie.csv")
USA_movie <- read.csv("USA_movie.csv")
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
avg_num_critic_for_reviews <- mean(movie$num_critic_for_reviews, na.rm = T)
movie$num_critic_for_reviews <- ifelse(is.na(movie$num_critic_for_reviews),
avg_num_critic_for_reviews,movie$num_critic_for_reviews)
avg_duration <- mean(movie$duration, na.rm = T)
movie$duration <- ifelse(is.na(movie$duration), avg_duration, movie$duration)
avg_director_facebook_likes <- mean(movie$director_facebook_likes, na.rm = T)
movie$director_facebook_likes <- ifelse(is.na(movie$director_facebook_likes),
avg_director_facebook_likes, movie$director_facebook_likes)
avg_actor_3_facebook_likes <- mean(movie$actor_3_facebook_likes, na.rm = T)
movie$actor_3_facebook_likes <- ifelse(is.na(movie$actor_3_facebook_likes),
avg_actor_3_facebook_likes, movie$actor_3_facebook_likes)
avg_actor_1_facebook_likes <- mean(movie$actor_1_facebook_likes, na.rm = T)
movie$actor_1_facebook_likes <- ifelse(is.na(movie$actor_1_facebook_likes),
avg_actor_1_facebook_likes, movie$actor_1_facebook_likes)
avg_gross <- mean(movie$gross, na.rm = T)
movie$gross <- ifelse(is.na(movie$gross), avg_gross, movie$gross)
avg_facenumber_in_poster <- mean(movie$facenumber_in_poster, na.rm = T)
movie$facenumber_in_poster <- ifelse(is.na(movie$facenumber_in_poster),
avg_facenumber_in_poster, movie$facenumber_in_poster)
avg_num_user_for_reviews <- mean(movie$num_user_for_reviews, na.rm = T)
movie$num_user_for_reviews <- ifelse(is.na(movie$num_user_for_reviews),
avg_num_user_for_reviews, movie$num_user_for_reviews)
avg_budget <- mean(movie$budget, na.rm = T)
movie$budget <- ifelse(is.na(movie$budget), avg_budget, movie$budget)
avg_actor_2_facebook_likes <- mean(movie$actor_2_facebook_likes, na.rm = T)
movie$actor_2_facebook_likes <- ifelse(is.na(movie$actor_2_facebook_likes),
avg_actor_2_facebook_likes, movie$actor_2_facebook_likes)
avg_aspect_ratio <- mean(movie$aspect_ratio, na.rm = T)
movie$aspect_ratio <- ifelse(is.na(movie$aspect_ratio), avg_aspect_ratio, movie$aspect_ratio)
movie_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
# 변수 수정 및 삭제
movie_data$other_actors_facebook_likes <- movie_data$actor_2_facebook_likes + movie_data$actor_3_facebook_likes
movie_data <- subset(movie_data, select = -c(cast_total_facebook_likes, actor_2_facebook_likes, actor_3_facebook_likes))
movie <- movie_data[c("facenumber_in_poster", "director_facebook_likes", "duration", "imdb_score",
"actor_1_facebook_likes", "other_actors_facebook_likes", "movie_facebook_likes",
"budget")]
# 회귀 모델
mov_model <- lm(formula = imdb_score ~ ., data = movie)
# other_actors_facebook_likes 제외 나머지 변수들 유의미
# 모형 선택법(Model Selection) --> 유의하지 않은 변수 제거
# Backward selection
out <- lm(imdb_score ~., movie)
mov_model2 <- step(out, direction = "backward", trace = T)
library(rpart)
sample_count <- round(nrow(movie)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(movie), sample_count)
train <- movie[sample_rows, ]
test <- movie[-sample_rows, ]
# 통계적으로 유의한지 여부 확인
summary(mov_model)
summary(mov_model2)
str(movie)
library(Cubist)
# 모델 트리
movie_cubist <- cubist(x = movie[-4], y = movie$imdb_score)
movie_cubist
summary(movie_cubist)
# 성능 테스트
movie_predict2 <- predict(movie_cubist, test)
head(movie_predict2)
summary(movie_predict2)
summary(movie$imdb_score)
# 상관계수
cor(movie_predict2, movie$imdb_score)
cor(movie$imdb_score, movie_predict2)
# 상관계수
cor(movie_predict2, test$imdb_score)
# 2) MAE: 평균 절대 오차
MAE <- function(actual, predict) {
return(mean(abs(actual - predict)))
}
MAE(actual = test$imdb_score, predict = movie_predict)
library(rpart)
sample_count <- round(nrow(movie)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(movie), sample_count)
train <- movie[sample_rows, ]
test <- movie[-sample_rows, ]
# rpart를 이용해 학습시키기
movie_rpart <- rpart(formula = imdb_score ~ ., data = train)
# 모델 평가
movie_predict <- predict(movie_rpart, test)
# 모델 성능 평가
# 1) 상관 계수
cor(movie_predict, test$imdb_score)
MAE(actual = test$imdb_score, predict = movie_predict)
# 상관계수
cor(movie_predict2, test$imdb_score)
# MAE
MAE(movie_predict2, test$imdb_score)
# Random Forest
install.packages("randomForest")
library(randomForest)
)
mov_model3 <- randomForest(imdb_score ~ ., data = movie)
mov_model3
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
library(caret)
set.seed(123)
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(movie_predict3, test)
View(test)
movie_predict3 <- predict(mov_model3, test[-4])
confusionMatrix(movie_predict3, test$imdb_score)
mov_model3
movie_predict3 <- predict(mov_model3, test[-4])
confusionMatrix(movie_predict3, test$imdb_score)
confusionMatrix(movie_predict3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(movie_predict3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(test$imdb_score, movie_predict3)
confusionMatrix(data = test$imdb_score, reference = movie_predict3,
positive = "spam")
confusionMatrix(data = test$imdb_score, reference = movie_predict3,
positive = "spam")
mov_model3
str(mov_model3)
confusionMatrix(data = test$imdb_score, reference = movie_predict3$imdb_score,
positive = "spam")
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
mov_model3
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T,
proximity = T)
print(mov_model3)
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
print(mov_model3)
importance(mov_model3)
varImpPlot(movie_predict3)
varImpPlot(movie_model3)
varImpPlot(mov_model3)
importance <- importance(mov_model3)
varlmportance <- data.frame(Variables = row.names(importance),
lmportance = round(importance[, 'IncNodePurity'], 2))
library(dplyr)
ranklmportance <- varlmportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ranklmportance <- varlmportance %>%
mutate(Rank = paste0('#',dense_rank(desc(importance))))
ranklmportance <- varlmportance %>%
mutate(rank = paste0('#',dense_rank(desc(importance))))
ranklmportance <- varlmportance %>%
mutate(R = paste0('#',dense_rank(desc(importance))))
ggplot(varlmportance, aes(x = reorder(Variables, lmportance),
y = importance, fill = importance)) +
geom_bar()
movie_predict3 <- predict(mov_model3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test$imdb_score)
str(test)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(movie_predict3, test$imdb_score)
levels(movie_predict3)
print(mov_model3)
levels(test$imdb_score)
str(movie_predict3)
str(test$imdb_score)
confusionMatrix(table(movie_predict3, test$imdb_score))
table(movie_predict3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test, na.action = na.pass)
confusionMatrix(movie_predict3, test$imdb_score)
