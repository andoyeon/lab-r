# 위스콘신 유방암 데이터 준비
wbcd <- read.csv(file = "GitHub/lab-r/data/wisc_bc_data.csv")
str(wbcd)
install.packages(c("gplots", "Hmisc", "psych"))
install.packages(c("Cubist", "rpart.plot"))
load("data/project/movie.rda")
load("lab-r/project data/movie.rda")
# NA값을 가진 변수
summary(movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross",
"facenumber_in_poster", "num_user_for_reviews", "budget",
"actor_2_facebook_likes", "aspect_ratio")])
sum(is.na(movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross",
"facenumber_in_poster", "num_user_for_reviews", "budget",
"actor_2_facebook_likes", "aspect_ratio")]))
boxplot(movie$imdb_score)
hist(movie$imdb_score)
# imdb_score과 관련있는 변수 확인 - 히트맵
num_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "aspect_ratio",
"movie_facebook_likes")]
library(Hmisc)
c1 <- rcorr(as.matrix(num_data))
install.packages("gplots")
# install.packages("RColorBrewer")
# install.packages("gplots")
library(RColorBrewer)
library(gplots)
heatmap.2(as.matrix(c1$r), trace = "none", col = brewer.pal(9, "RdBu"),
cexCol = 0.8, cexRow = 0.8, margins = c(9,9), density.info = "none")
# 상관 행렬
library(psych)
pairs.panels(movie[c("imdb_score", "num_voted_users", "num_user_for_reviews", "num_critic_for_reviews",
"movie_facebook_likes", "gross", "duration", "director_facebook_likes",
"cast_total_facebook_likes")])
cor_data <- movie[c("imdb_score", "num_voted_users", "num_user_for_reviews", "num_critic_for_reviews",
"movie_facebook_likes", "gross", "duration", "director_facebook_likes",
"cast_total_facebook_likes")]
# 다중 선형 회귀
movie_model <- lm(formula = imdb_score ~ ., data = cor_data)
library(rpart)
train <- cor_data[1:2855, ]
test <- cor_data[2856:3807, ]
# 학습 데이터 rpart 패키지를 사용해 학습시키기
train_rpart <- rpart(formula = imdb_score ~ ., data = train)
# 회귀트리 시각화
library(rpart.plot)
rpart.plot(x = train_rpart)
# 모델 평가
movie_predict <- predict(train_rpart, test)
summary(movie_predict)  # 예측
summary(test$imdb_score)  # 실제
# 성능 평가
cor(movie_predict, test$imdb_score)   # 0.398
MAE <- function(actual, predict) {
return(mean(abs(actual - predict)))
}
MAE(actual = test$imdb_score, predict = movie_predict)  # 1.042
# 모델 성능 향상
library(Cubist)
movie_cubist <- cubist(x = train[-1], y = train$imdb_score)
# 모델 트리 성능 테스트
movie_predict2 <- predict(movie_cubist, test)
# 상관 계수
cor(movie_predict2, test$imdb_score)  # 0.42
# 평균 절대 오차
MAE(movie_predict2, test$imdb_score)  # 1.019
# 1. 데이터 준비
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
install.packages("neuralnet")
install.packages(c("car", "randomForest"))
search()
library(ggplot2)
str(movie)
summary(movie[c(director_name, duration, director_facebook_likes, movie_facebook_likes)])
summary(movie[c("director_name", "duration", "director_facebook_likes", "movie_facebook_likes")])
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score)) +
geom_point()
load("data/project/cor_data2.rda")
movie <- cor_data2
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, fill = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, fill = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, col = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, colors = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = as.factor(director_name))) +
geom_point()
load("data/project/movie.rda")
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = as.factor(director_name))) +
geom_point()
rm(list=ls())
load("data/project/movie.rda")
library(ggplot2)
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = content_rating)) +
geom_point()
str(movie)
summary(movie[c("director_name", "duration", "director_facebook_likes", "movie_facebook_likes")])
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = color)) +
geom_point()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_bar()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_col()
# duration
ggplot(movie, aes(duration, imdb_score, color = "yellow")) +
geom_col()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_col(col = "#FFCC00")
# 감독 좋아요 수
ggplot(data = movie, mapping = aes(x = , y = director_name,
color = director_facebook_likes)) +
geom_point()
# 감독 좋아요 수
ggplot(data = movie, mapping = aes(x = director_name, y = imdb_score,
color = director_facebook_likes)) +
geom_point()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_col(col = "#FFCC00")
# 영화 좋아요 수
ggplot(movie, aes(x=movie_facebook_likes, y=imdb_score)) +
geom_point()
# 영화 좋아요 수
ggplot(movie, aes(x=movie_facebook_likes, y=imdb_score, color = language)) +
geom_point()
