<<<<<<< HEAD
# 위스콘신 유방암 데이터 준비
wbcd <- read.csv(file = "GitHub/lab-r/data/wisc_bc_data.csv")
str(wbcd)
install.packages(c("gplots", "Hmisc", "psych"))
install.packages(c("Cubist", "rpart.plot"))
=======
plot(mov_model)  # 모델이 적합한지
# 통계적으로 유의한지 여부 확인
summary(mov_model)   # other_actors_facebook_likes 제외 나머지 변수들 유의미
# Backward selection 자동화
mov_model2 <- step(out, direction = "backward", trace = T)
mov_model2    # 최종 선택된 회귀모형
summary(mov_model2)
sample_count <- round(nrow(movie)) * 0.75
# 회귀 트리
library(rpart)
sample_count <- round(nrow(movie)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(movie), sample_count)
train <- movie[sample_rows, ]
test <- movie[-sample_rows, ]
# 예측
mov_pred <- predict(mov_model2, test)
summary(mov_pred)
summary(mov_model2)
rm(list=ls())
>>>>>>> e38e3c099429961381d5d5857232434247e5fa14
load("data/project/movie.rda")
load("lab-r/project data/movie.rda")
# NA값을 가진 변수
summary(movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross",
"facenumber_in_poster", "num_user_for_reviews", "budget",
"actor_2_facebook_likes", "aspect_ratio")])
sum(is.na(movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross",
"facenumber_in_poster", "num_user_for_reviews", "budget",
"actor_2_facebook_likes", "aspect_ratio")]))
boxplot(movie$imdb_score)
hist(movie$imdb_score)
# imdb_score과 관련있는 변수 확인 - 히트맵
num_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "aspect_ratio",
"movie_facebook_likes")]
library(Hmisc)
c1 <- rcorr(as.matrix(num_data))
install.packages("gplots")
# install.packages("RColorBrewer")
# install.packages("gplots")
library(RColorBrewer)
library(gplots)
heatmap.2(as.matrix(c1$r), trace = "none", col = brewer.pal(9, "RdBu"),
cexCol = 0.8, cexRow = 0.8, margins = c(9,9), density.info = "none")
# 상관 행렬
library(psych)
pairs.panels(movie[c("imdb_score", "num_voted_users", "num_user_for_reviews", "num_critic_for_reviews",
"movie_facebook_likes", "gross", "duration", "director_facebook_likes",
"cast_total_facebook_likes")])
cor_data <- movie[c("imdb_score", "num_voted_users", "num_user_for_reviews", "num_critic_for_reviews",
"movie_facebook_likes", "gross", "duration", "director_facebook_likes",
"cast_total_facebook_likes")]
# 다중 선형 회귀
movie_model <- lm(formula = imdb_score ~ ., data = cor_data)
library(rpart)
train <- cor_data[1:2855, ]
test <- cor_data[2856:3807, ]
# 학습 데이터 rpart 패키지를 사용해 학습시키기
train_rpart <- rpart(formula = imdb_score ~ ., data = train)
# 회귀트리 시각화
library(rpart.plot)
rpart.plot(x = train_rpart)
# 모델 평가
movie_predict <- predict(train_rpart, test)
summary(movie_predict)  # 예측
summary(test$imdb_score)  # 실제
# 성능 평가
cor(movie_predict, test$imdb_score)   # 0.398
MAE <- function(actual, predict) {
return(mean(abs(actual - predict)))
}
MAE(actual = test$imdb_score, predict = movie_predict)  # 1.042
# 모델 성능 향상
library(Cubist)
movie_cubist <- cubist(x = train[-1], y = train$imdb_score)
# 모델 트리 성능 테스트
movie_predict2 <- predict(movie_cubist, test)
<<<<<<< HEAD
# 상관 계수
cor(movie_predict2, test$imdb_score)  # 0.42
# 평균 절대 오차
MAE(movie_predict2, test$imdb_score)  # 1.019
# 1. 데이터 준비
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
install.packages("neuralnet")
install.packages(c("car", "randomForest"))
search()
library(ggplot2)
str(movie)
summary(movie[c(director_name, duration, director_facebook_likes, movie_facebook_likes)])
summary(movie[c("director_name", "duration", "director_facebook_likes", "movie_facebook_likes")])
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score)) +
geom_point()
load("data/project/cor_data2.rda")
movie <- cor_data2
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, fill = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, fill = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, col = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score, colors = director_name)) +
geom_point()
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = as.factor(director_name))) +
geom_point()
load("data/project/movie.rda")
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = as.factor(director_name))) +
geom_point()
rm(list=ls())
load("data/project/movie.rda")
library(ggplot2)
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = content_rating)) +
geom_point()
str(movie)
summary(movie[c("director_name", "duration", "director_facebook_likes", "movie_facebook_likes")])
ggplot(data = movie, mapping = aes(x = director_facebook_likes, y = imdb_score,
color = color)) +
geom_point()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_bar()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_col()
# duration
ggplot(movie, aes(duration, imdb_score, color = "yellow")) +
geom_col()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_col(col = "#FFCC00")
# 감독 좋아요 수
ggplot(data = movie, mapping = aes(x = , y = director_name,
color = director_facebook_likes)) +
geom_point()
# 감독 좋아요 수
ggplot(data = movie, mapping = aes(x = director_name, y = imdb_score,
color = director_facebook_likes)) +
geom_point()
# duration
ggplot(movie, aes(duration, imdb_score)) +
geom_col(col = "#FFCC00")
# 영화 좋아요 수
ggplot(movie, aes(x=movie_facebook_likes, y=imdb_score)) +
geom_point()
# 영화 좋아요 수
ggplot(movie, aes(x=movie_facebook_likes, y=imdb_score, color = language)) +
geom_point()
=======
head(movie_predict2)
summary(movie_predict2)
summary(test$imdb_score)
# 모델 성능 평가
# 1) 상관 계수
cor(movie_predict2, test$imdb_score)  # 0.469
# 2) MAE
MAE(actual = test$imdb_score, predict = movie_predict2) # 0.736
```
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
USA_movie <- read.csv("data/project/USA_movie.csv")
USA_movie <- read.csv("USA_movie.csv")
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
avg_num_critic_for_reviews <- mean(movie$num_critic_for_reviews, na.rm = T)
movie$num_critic_for_reviews <- ifelse(is.na(movie$num_critic_for_reviews),
avg_num_critic_for_reviews,movie$num_critic_for_reviews)
avg_duration <- mean(movie$duration, na.rm = T)
movie$duration <- ifelse(is.na(movie$duration), avg_duration, movie$duration)
avg_director_facebook_likes <- mean(movie$director_facebook_likes, na.rm = T)
movie$director_facebook_likes <- ifelse(is.na(movie$director_facebook_likes),
avg_director_facebook_likes, movie$director_facebook_likes)
avg_actor_3_facebook_likes <- mean(movie$actor_3_facebook_likes, na.rm = T)
movie$actor_3_facebook_likes <- ifelse(is.na(movie$actor_3_facebook_likes),
avg_actor_3_facebook_likes, movie$actor_3_facebook_likes)
avg_actor_1_facebook_likes <- mean(movie$actor_1_facebook_likes, na.rm = T)
movie$actor_1_facebook_likes <- ifelse(is.na(movie$actor_1_facebook_likes),
avg_actor_1_facebook_likes, movie$actor_1_facebook_likes)
avg_gross <- mean(movie$gross, na.rm = T)
movie$gross <- ifelse(is.na(movie$gross), avg_gross, movie$gross)
avg_facenumber_in_poster <- mean(movie$facenumber_in_poster, na.rm = T)
movie$facenumber_in_poster <- ifelse(is.na(movie$facenumber_in_poster),
avg_facenumber_in_poster, movie$facenumber_in_poster)
avg_num_user_for_reviews <- mean(movie$num_user_for_reviews, na.rm = T)
movie$num_user_for_reviews <- ifelse(is.na(movie$num_user_for_reviews),
avg_num_user_for_reviews, movie$num_user_for_reviews)
avg_budget <- mean(movie$budget, na.rm = T)
movie$budget <- ifelse(is.na(movie$budget), avg_budget, movie$budget)
avg_actor_2_facebook_likes <- mean(movie$actor_2_facebook_likes, na.rm = T)
movie$actor_2_facebook_likes <- ifelse(is.na(movie$actor_2_facebook_likes),
avg_actor_2_facebook_likes, movie$actor_2_facebook_likes)
avg_aspect_ratio <- mean(movie$aspect_ratio, na.rm = T)
movie$aspect_ratio <- ifelse(is.na(movie$aspect_ratio), avg_aspect_ratio, movie$aspect_ratio)
movie_data <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
# 변수 수정 및 삭제
movie_data$other_actors_facebook_likes <- movie_data$actor_2_facebook_likes + movie_data$actor_3_facebook_likes
movie_data <- subset(movie_data, select = -c(cast_total_facebook_likes, actor_2_facebook_likes, actor_3_facebook_likes))
movie <- movie_data[c("facenumber_in_poster", "director_facebook_likes", "duration", "imdb_score",
"actor_1_facebook_likes", "other_actors_facebook_likes", "movie_facebook_likes",
"budget")]
# 회귀 모델
mov_model <- lm(formula = imdb_score ~ ., data = movie)
# other_actors_facebook_likes 제외 나머지 변수들 유의미
# 모형 선택법(Model Selection) --> 유의하지 않은 변수 제거
# Backward selection
out <- lm(imdb_score ~., movie)
mov_model2 <- step(out, direction = "backward", trace = T)
library(rpart)
sample_count <- round(nrow(movie)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(movie), sample_count)
train <- movie[sample_rows, ]
test <- movie[-sample_rows, ]
# 통계적으로 유의한지 여부 확인
summary(mov_model)
summary(mov_model2)
str(movie)
library(Cubist)
# 모델 트리
movie_cubist <- cubist(x = movie[-4], y = movie$imdb_score)
movie_cubist
summary(movie_cubist)
# 성능 테스트
movie_predict2 <- predict(movie_cubist, test)
head(movie_predict2)
summary(movie_predict2)
summary(movie$imdb_score)
# 상관계수
cor(movie_predict2, movie$imdb_score)
cor(movie$imdb_score, movie_predict2)
# 상관계수
cor(movie_predict2, test$imdb_score)
# 2) MAE: 평균 절대 오차
MAE <- function(actual, predict) {
return(mean(abs(actual - predict)))
}
MAE(actual = test$imdb_score, predict = movie_predict)
library(rpart)
sample_count <- round(nrow(movie)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(movie), sample_count)
train <- movie[sample_rows, ]
test <- movie[-sample_rows, ]
# rpart를 이용해 학습시키기
movie_rpart <- rpart(formula = imdb_score ~ ., data = train)
# 모델 평가
movie_predict <- predict(movie_rpart, test)
# 모델 성능 평가
# 1) 상관 계수
cor(movie_predict, test$imdb_score)
MAE(actual = test$imdb_score, predict = movie_predict)
# 상관계수
cor(movie_predict2, test$imdb_score)
# MAE
MAE(movie_predict2, test$imdb_score)
# Random Forest
install.packages("randomForest")
library(randomForest)
)
mov_model3 <- randomForest(imdb_score ~ ., data = movie)
mov_model3
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
library(caret)
set.seed(123)
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(movie_predict3, test)
View(test)
movie_predict3 <- predict(mov_model3, test[-4])
confusionMatrix(movie_predict3, test$imdb_score)
mov_model3
movie_predict3 <- predict(mov_model3, test[-4])
confusionMatrix(movie_predict3, test$imdb_score)
confusionMatrix(movie_predict3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(movie_predict3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(test$imdb_score, movie_predict3)
confusionMatrix(data = test$imdb_score, reference = movie_predict3,
positive = "spam")
confusionMatrix(data = test$imdb_score, reference = movie_predict3,
positive = "spam")
mov_model3
str(mov_model3)
confusionMatrix(data = test$imdb_score, reference = movie_predict3$imdb_score,
positive = "spam")
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
mov_model3
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T,
proximity = T)
print(mov_model3)
mov_model3 <- randomForest(imdb_score ~ ., data = movie, importance = T)
print(mov_model3)
importance(mov_model3)
varImpPlot(movie_predict3)
varImpPlot(movie_model3)
varImpPlot(mov_model3)
importance <- importance(mov_model3)
varlmportance <- data.frame(Variables = row.names(importance),
lmportance = round(importance[, 'IncNodePurity'], 2))
library(dplyr)
ranklmportance <- varlmportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ranklmportance <- varlmportance %>%
mutate(Rank = paste0('#',dense_rank(desc(importance))))
ranklmportance <- varlmportance %>%
mutate(rank = paste0('#',dense_rank(desc(importance))))
ranklmportance <- varlmportance %>%
mutate(R = paste0('#',dense_rank(desc(importance))))
ggplot(varlmportance, aes(x = reorder(Variables, lmportance),
y = importance, fill = importance)) +
geom_bar()
movie_predict3 <- predict(mov_model3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test$imdb_score)
str(test)
movie_predict3 <- predict(mov_model3, test)
confusionMatrix(movie_predict3, test$imdb_score)
levels(movie_predict3)
print(mov_model3)
levels(test$imdb_score)
str(movie_predict3)
str(test$imdb_score)
confusionMatrix(table(movie_predict3, test$imdb_score))
table(movie_predict3, test$imdb_score)
movie_predict3 <- predict(mov_model3, test, na.action = na.pass)
confusionMatrix(movie_predict3, test$imdb_score)
>>>>>>> e38e3c099429961381d5d5857232434247e5fa14
