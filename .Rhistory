# 2. 데이터 확인, 전처리
str(USA_movie)
summary(USA_movie)
sum(is.na(movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross",
"facenumber_in_poster", "num_user_for_reviews", "budget",
"actor_2_facebook_likes", "aspect_ratio")]))
pairs.panels(cor_data2)
# 상관 행렬
library(psych)
pairs.panels(cor_data2)
lm_movie
plot(lm_movie)  # 모델이 적합한지
# 통계적으로 유의한지 여부 확인
summary(lm_movie)   # 모두 유의한 변수 # R-squared: 0.1353
cormat <- round(cor(num_data2), 2)
library(reshape2)
melted_cormat <- melt(cormat)
library(ggplot2)
ggplot(data = melted_cormat, mapping = aes(x = Var1, y = Var2, fill = value)) +
geom_tile()
return(cormat)
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
lower_tri <- get_lower_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(lower_tri, na.rm = T)
# heatmap
ggplot(data = melted_cormat, mapping = aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Movie Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1)) +
coord_fixed()
# heatmap
ggplot(data = melted_cormat, mapping = aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "Skyblue",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Movie Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1)) +
coord_fixed()
# heatmap
ggplot(data = melted_cormat, mapping = aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "White",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Movie Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1)) +
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "darkred", high = "yellow", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "darkred", high = "Skyblue", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# 상관 행렬
library(psych)
pairs.panels(cor_data2)
# 회귀 모델
lm_movie <- lm(formula = imdb_score ~ ., data = cor_data2)
# 통계적으로 유의한지 여부 확인
summary(lm_movie)   # 모두 유의한 변수 # R-squared: 0.1353
plot(lm_movie)  # 모델이 적합한지
# 통계적으로 유의한지 여부 확인
summary(lm_movie)   # 모두 유의한 변수 # R-squared: 0.1353
library(rpart)
boxplot(train$imdb_score)
boxplot(test$imdb_score)
movie_rpart
# 회귀트리 시각화
library(rpart.plot)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7, fallen.leaves = T, type = 3)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7, fallen.leaves = T, type = 2)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7, fallen.leaves = T, type = 1)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7, fallen.leaves = T, type = 4)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7, fallen.leaves = T, type = 5)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7, fallen.leaves = T, type = 6)
rpart.plot(x = movie_rpart, digits = 3, cex = 1.2, fallen.leaves = T, type = 4)
rpart.plot(x = movie_rpart, digits = 3, cex = 1.2, fallen.leaves = T, type = 2)
rpart.plot(x = movie_rpart, digits = 3, cex = 1.0, fallen.leaves = T, type = 5)
rpart.plot(x = movie_rpart, digits = 3, cex = 1.0, type = 5)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.8, fallen.leaves = T, type = 5, extra = 101)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.8, fallen.leaves = T, type = 5)
prp(movie_rpart, extra = 6, box.palette = "Skyblue")
prp(movie_rpart,box.palette = "Skyblue")
prp(movie_rpart,box.palette = "Blues")
# 회귀트리 시각화
library(rpart.plot)
prp(movie_rpart,box.palette = c("Blues", "red")
rpart.plot(x = movie_rpart, digits = 3, cex = 0.8, fallen.leaves = T, type = 5)
# 회귀트리 시각화
library(rpart.plot)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7)
prp(movie_rpart,box.palette = c("Blues", "red")
prp(movie_rpart,box.palette = "auto")
prp(movie_rpart,box.palette = "auto")
rpart.plot(x = movie_rpart, digits = 3, cex = 0.8, fallen.leaves = T, type = 5)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7)
rpart.plot(movie_cubist)
rpart.plot(movie_cubist, digit = 3)
rpart.plot(x = movie_rpart, digits = 5, cex = 0.7)
rpart.plot(x = movie_rpart, digits = 2, cex = 0.7)
rpart.plot(x = movie_rpart, digits = 4, cex = 0.7)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7)
# 신경망 모델
rm(list=ls())
# 1. 데이터 준비
letters <- read.csv(file = "mlwr/letterdata.csv")
# 학습 데이터(80%) / 테스트 데이트(20%) 세트
letters_train <- letters[1:16000, ]
letters_test <- letters[16001:20000, ]
library(kernlab)
# SVM 알고리즘 모델을 생성
letter_classifier <- ksvm(letter ~ .,
data = letters_train,
kernel = "vanilladot")
# 4. 모델 평가
letters_predict <- predict(letter_classifier, letters_test)
table(letters_predict, letters_test$letter)
letters_predict[1] == letters_test$letter[1]
correct <- ifelse(letters_predict == letters_test$letter, 1, 0)
correct_count <- sum(correct)
correct_count   # SVM 모델이 문자들을 제대로 구분한 갯수
# 신경망 모델
rm(list=ls())
load("data/project/movie.rda")
save(cor_data2, file = "data/project/cor_data2.rda")
# imdb_score과 관련있는 변수 확인 - 히트맵
num_data2 <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
cor_data2 <- num_data2[c("duration", "director_facebook_likes", "actor_1_facebook_likes",
"cast_total_facebook_likes", "actor_2_facebook_likes","imdb_score",
"movie_facebook_likes")]
save(cor_data2, file = "data/project/cor_data2.rda")
load("data/project/cor_data2.rda")
# 데이터확인
str(cor_data2)
summary(cor_data2)
# 정규화
normalization <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
movie_norm <- as.data.frame(lapply(cor_data2, normalization))
summary(movie_norm)
library(neuralnet)
sample_count <- round(nrow(cor_data2)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(cor_data2), sample_count)
# 모델 생성
movie_train <- movie_train[sample_rows, ]
# 모델 생성
movie_train <- movie_norm[sample_rows, ]
movie_test <- movie_norm[-sample_rows, ]
summary(movie_train$imdb_score)
summary(movie_test$imdb_score)
boxplot(movie_train$imdb_score)
boxplot(movie_test$imdb_score)
# 신경망 모델 생성
set.seed(1234)
movie_model <- neuralnet(formula = imdb_score ~ .,
data = movie_train)
# 생성된 NN 확인
plot(movie_model)
View(movie_test)
# 만들어진 NN 평가
# 테스트 데이터 세트에 적용
model_result <- compute(movie_model, movie_test[-6])
head(model_result)
predict_result <- model_result$net.result
# 상관 계수
cor(predict_result, movie_test$imdb_score)
# 모델 향상
movie_model5 <- neuralnet(formula = imdb_score ~ .,
data = movie_train,
hidden = 5)
plot(movie_model5)
1260 / (3807 * 7)
1260 / (3807 * 28)
View(num_data2)
1260 / (3807*14)
# Print the heatmap
print(ggheatmap)
library(reshape2)
melted_cormat <- melt(cormat)
library(ggplot2)
ggplot(data = melted_cormat, mapping = aes(x = Var1, y = Var2, fill = value)) +
geom_tile()
melted_cormat <- melt(cormat)
cormat <- round(cor(num_data2), 2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, mapping = aes(x = Var1, y = Var2, fill = value)) +
geom_tile()
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
lower_tri <- get_lower_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(lower_tri, na.rm = T)
# heatmap
ggplot(data = melted_cormat, mapping = aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Movie Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1)) +
coord_fixed()
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "darkred", high = "yellow", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "skyblue", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "darkblue", mid = "skyblue",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
boxplot(movie$imdb_score)
hist(movie$imdb_score)
ggplot(data = melted_cormat, mapping = aes(x = Var1, y = Var2, fill = value)) +
geom_tile()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score, col = "skyblue")) +
geom_bar()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score,
borders("white"))) +
geom_bar()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="skyblue") +
scale_fill_brewer(palette=1) +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(palette=1) +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(palette=1"skyblue"") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(palette="skyblue"") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer("skyblue"") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(blue) +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white", fill='#CC3399') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white", fill='#84A7D3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour=none, fill='#84A7D3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#84A7D3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#18B4E9') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#00B5E3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#C60') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#00B5E3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#00B5E3') +
ggtitle("IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle("IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "d")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(subtitle = "d")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "             IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                       IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                            IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                      IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                       IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                        IMDB score")
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "skyblue", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
labels = "Histogram of IMDB score")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
breaks = 10)
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
breaks = seq(1, 10, by = 1))
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
prob = T)
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
lines((frequency(cor_data$imdb_score)))
lines((frequency(cor_data2$imdb_score)))
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
xname = "r")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
movie <- num_data2[c("duration", "director_facebook_likes", "actor_1_facebook_likes",
"cast_total_facebook_likes", "actor_2_facebook_likes","imdb_score",
"movie_facebook_likes")]
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
# imdb_score 분포도
hist(movie$imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
cor_data2 <- num_data2[c("duration", "director_facebook_likes", "actor_1_facebook_likes",
"cast_total_facebook_likes", "actor_2_facebook_likes","imdb_score",
"movie_facebook_likes")]
# 1. 데이터 준비
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
# imdb_score과 관련있는 변수 확인 - 히트맵
num_data2 <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
cor_data2 <- num_data2[c("duration", "director_facebook_likes", "actor_1_facebook_likes",
"cast_total_facebook_likes", "actor_2_facebook_likes","imdb_score",
"movie_facebook_likes")]
# imdb_score 분포도
imdb_score <- as.data.frame(cor_data2$imdb_score)
hist(imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
View(imdb_score)
