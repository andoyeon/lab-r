midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "skyblue", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "darkblue", mid = "skyblue",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
boxplot(movie$imdb_score)
hist(movie$imdb_score)
ggplot(data = melted_cormat, mapping = aes(x = Var1, y = Var2, fill = value)) +
geom_tile()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score, col = "skyblue")) +
geom_bar()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score,
borders("white"))) +
geom_bar()
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="skyblue") +
scale_fill_brewer(palette=1) +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(palette=1) +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(palette=1"skyblue"") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(palette="skyblue"") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer("skyblue"") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
scale_fill_brewer(blue) +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white") +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white", fill='#CC3399') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour="white", fill='#84A7D3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", colour=none, fill='#84A7D3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#84A7D3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#18B4E9') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#00B5E3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#C60') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#00B5E3') +
ggtitle("Bar Chart of Frequency by Car Type & Origin")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(position="dodge", fill='#00B5E3') +
ggtitle("IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle("IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "d")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(subtitle = "d")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "             IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                       IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                            IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                      IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                       IMDB score")
# imdb_score 분포도 그래프
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill='#00B5E3') +
ggtitle(label = "                        IMDB score")
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "skyblue", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
labels = "Histogram of IMDB score")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
breaks = 10)
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
breaks = seq(1, 10, by = 1))
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
prob = T)
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white")
lines((frequency(cor_data$imdb_score)))
lines((frequency(cor_data2$imdb_score)))
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
xname = "r")
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
movie <- num_data2[c("duration", "director_facebook_likes", "actor_1_facebook_likes",
"cast_total_facebook_likes", "actor_2_facebook_likes","imdb_score",
"movie_facebook_likes")]
# imdb_score 분포도
hist(cor_data2$imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
# imdb_score 분포도
hist(movie$imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
cor_data2 <- num_data2[c("duration", "director_facebook_likes", "actor_1_facebook_likes",
"cast_total_facebook_likes", "actor_2_facebook_likes","imdb_score",
"movie_facebook_likes")]
# 1. 데이터 준비
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
# imdb_score과 관련있는 변수 확인 - 히트맵
num_data2 <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
cor_data2 <- num_data2[c("duration", "director_facebook_likes", "actor_1_facebook_likes",
"cast_total_facebook_likes", "actor_2_facebook_likes","imdb_score",
"movie_facebook_likes")]
# imdb_score 분포도
imdb_score <- as.data.frame(cor_data2$imdb_score)
hist(imdb_score, col = "skyblue", border = "white",
main = "Histogram of IMDB score")
View(imdb_score)
rm(list=ls())
load("data/project/cor_data2.rda")
# 회귀 모델
lm_movie <- lm(formula = imdb_score ~ ., data = cor_data2)
# 통계적으로 유의한지 여부 확인
summary(lm_movie)   # 모두 유의한 변수 # R-squared: 0.1353
library(rpart)
sample_count <- round(nrow(cor_data2)) * 0.75
set.seed(123)
sample_rows <- sample(nrow(cor_data2), sample_count)
train <- cor_data2[sample_rows, ]
test <- cor_data2[-sample_rows, ]
m
# 회귀트리 시각화
library(rpart.plot)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.8, fallen.leaves = T, type = 5)
# rpart를 이용해 학습시키기
movie_rpart <- rpart(formula = imdb_score ~ ., data = train)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.8, fallen.leaves = T, type = 5)
rpart.plot(x = movie_rpart, digits = 3, cex = 0.7)
prp(movie_rpart,box.palette = "auto")
install.packages("lars")
library(lars)
movie_lars <- lars(y = imdb_score, type = "lasso")
movie_lars <- lars(x = duration ,y = imdb_score, type = "lasso")
colnames(cor_data2)
movie_lars <- lars(x = duration ,y = imdb_score, type = "lasso")
plot(cv.lars(cor_data2))
movie_lars <- lars(x,y, type = "lasso")
data("diabetes")
str(diabetes)
rm(list=ls())
data(cars)
str(cars)
summary(cars)
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
USA_movie <- read.csv("USA_movie.csv")
rm(list=ls())
USA_movie <- read.csv("USA_movie.csv")
str(USA_movie)
summary(USA_movie)
sum(is.na(movie))
sum(is.na(USA_movie))
1334/(3807*28)
rm(list=ls())
movie <- USA_movie
USA_movie <- read.csv("USA_movie.csv")
USA_movie <- read.csv("data/project/USA_movie.csv")
movie <- USA_movie
avg_num_critic_for_reviews <- mean(movie$num_critic_for_reviews, na.rm = T)
movie$num_critic_for_reviews <- ifelse(is.na(movie$num_critic_for_reviews),
avg_num_critic_for_reviews,movie$num_critic_for_reviews)
avg_duration <- mean(movie$duration, na.rm = T)
movie$duration <- ifelse(is.na(movie$duration), avg_duration, movie$duration)
avg_director_facebook_likes <- mean(movie$director_facebook_likes, na.rm = T)
movie$director_facebook_likes <- ifelse(is.na(movie$director_facebook_likes),
avg_director_facebook_likes, movie$director_facebook_likes)
avg_actor_3_facebook_likes <- mean(movie$actor_3_facebook_likes, na.rm = T)
movie$actor_3_facebook_likes <- ifelse(is.na(movie$actor_3_facebook_likes),
avg_actor_3_facebook_likes, movie$actor_3_facebook_likes)
avg_actor_1_facebook_likes <- mean(movie$actor_1_facebook_likes, na.rm = T)
movie$actor_1_facebook_likes <- ifelse(is.na(movie$actor_1_facebook_likes),
avg_actor_1_facebook_likes, movie$actor_1_facebook_likes)
avg_gross <- mean(movie$gross, na.rm = T)
movie$gross <- ifelse(is.na(movie$gross), avg_gross, movie$gross)
avg_facenumber_in_poster <- mean(movie$facenumber_in_poster, na.rm = T)
movie$facenumber_in_poster <- ifelse(is.na(movie$facenumber_in_poster),
avg_facenumber_in_poster, movie$facenumber_in_poster)
avg_num_user_for_reviews <- mean(movie$num_user_for_reviews, na.rm = T)
movie$num_user_for_reviews <- ifelse(is.na(movie$num_user_for_reviews),
avg_num_user_for_reviews, movie$num_user_for_reviews)
avg_budget <- mean(movie$budget, na.rm = T)
movie$budget <- ifelse(is.na(movie$budget), avg_budget, movie$budget)
avg_title_year <- mean(movie$title_year, na.rm = T)
movie$budget <- ifelse(is.na(movie$title_year), avg_title_year, movie$title_year)
avg_actor_2_facebook_likes <- mean(movie$actor_2_facebook_likes, na.rm = T)
movie$actor_2_facebook_likes <- ifelse(is.na(movie$actor_2_facebook_likes),
avg_actor_2_facebook_likes, movie$actor_2_facebook_likes)
avg_aspect_ratio <- mean(movie$aspect_ratio, na.rm = T)
movie$aspect_ratio <- ifelse(is.na(movie$aspect_ratio), avg_aspect_ratio, movie$aspect_ratio)
summary(movie)
rm(list=ls())
load("data/project/movie.rda")
summary(movie)
# IMDB score 분포도
library(ggplot2)
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(colors = "yellow")
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "FFFF33")
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "CC3399")
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#CC3399")
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFFF33")
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00")
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_wsj()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_classic()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_bw()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_dark()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_gray()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_get()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_grey()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_light()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_void()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_update()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_test()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_set()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_replace()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_replace()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_minimal()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_linedraw()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_bw()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_classic()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar() +
theme_minimal()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_light()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_bw()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_classic()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_dark()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_get()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_gray()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_grey()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_light()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_linedraw()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_minimal()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_replace()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_set()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_test()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_minimal()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_get()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_grey()
ggplot(data = movie, mapping = aes(x = imdb_score)) +
geom_bar(fill = "#FFCC00") +
theme_light()
# imdb_score과 관련있는 변수 확인 - 히트맵
num_data2 <- movie[c("num_critic_for_reviews", "duration", "director_facebook_likes",
"actor_3_facebook_likes", "actor_1_facebook_likes", "gross", "num_voted_users",
"cast_total_facebook_likes", "facenumber_in_poster", "num_user_for_reviews",
"budget", "actor_2_facebook_likes","imdb_score", "movie_facebook_likes")]
# heatmap
cormat <- round(cor(num_data2), 2)
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
lower_tri <- get_lower_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(lower_tri, na.rm = T)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "darkred", high = "yellow", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "darkred", high = "yellow", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
library(reshape2)
melted_cormat <- melt(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
lower_tri <- get_lower_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(lower_tri, na.rm = T)
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "darkred", high = "yellow", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Movie\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 10, hjust = 1))+
coord_fixed()
# Print the heatmap
print(ggheatmap)
search()
search()
